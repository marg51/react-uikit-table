'use strict';

import React from 'react';
import Codeblock from '../../react-uikit-codeblock/lib/codeblock';
import Table from '../../react-uikit-table/lib/table';
import Note from '../../react-uikit-note/lib/note';


const items = [
  {
    Name: 'OTIS',
    score: 39,
    height: 5.6
  }, {
    name: 'jocelyn',
    score: 65,
    height: 4.8
  }, {
    name: 'Ania',
    score: -50,
    height: 6.10
  }
];


const data = [
  {d1: 'Data', d2: 'Data', d3: 'Data'},
  {d1: 'Data', d2: 'Data', d3: 'Data'},
  {d1: 'Data', d2: 'Data', d3: 'Data'}
];


const TableDoc = (props) => (
  <div>
    <link rel="stylesheet" href='https://cdnjs.cloudflare.com/ajax/libs/uikit/2.24.2/css/uikit.almost-flat.min.css' />
    <section>
      <h1>Table</h1>
      <p className='uk-article-lead'>
        Create nice looking tables.
      </p>
    </section>

    <section>
    <h2>Usage</h2>
    <p>
      <code>npm install react-uikit-table --save;</code>
    </p>
    <p>
      ES6 <br />
    <code>import Table from 'react-uikit-table';</code><br />
    </p>

    <p>
      ES5 <br />
    <code>var Table = require&#40;'react-uikit-table'&#41;;</code>
    </p>

    <Note badge={{context: 'danger', body: 'Note'}}>
      UIkit css is not included. You can get it from <a href='http://getuikit.com/'>getuikit.com</a>.
      This has been tested with UIKit version 2.24.2.
    </Note>

    <hr className="uk-article-divider" />

    <h3 className='example'>Example</h3>

    <p>
      Table can be type declaitively or generated by passing a JSON object to the <code>body</code> prop.
    </p>

    <Note>
      Nested properties are not supported at this time.
    </Note>

    <Table caption='Table 1 - Generated table.' head={['Heading', 'Heading', 'Heading']} body={data}/>

    <Table caption='Table 2 - From Children.'>
      <thead>
        <tr>
          <th className='uk-text-left'>Heading</th>
          <th className='uk-text-left'>Heading</th>
          <th className='uk-text-left'>Heading</th>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td className='uk-text-left'>Data</td>
          <td className='uk-text-left'>Data</td>
          <td className='uk-text-left'>Data</td>
        </tr>
        <tr>
          <td className='uk-text-left'>Data</td>
          <td className='uk-text-left'>Data</td>
          <td className='uk-text-left'>Data</td>
        </tr>
        <tr>
          <td className='uk-text-left'>Data</td>
          <td className='uk-text-left'>Data</td>
          <td className='uk-text-left'>Data</td>
        </tr>
      </tbody>
    </Table>

    <h4 className='code'>Code</h4>
    <Codeblock syntax='xml'>
{
`const data = [
  {d1: 'Data', d2: 'Data', d3: 'Data'},
  {d1: 'Data', d2: 'Data', d3: 'Data'},
  {d1: 'Data', d2: 'Data', d3: 'Data'}
];

<Table caption='Table 1 - Generated table.' head={['Heading', 'Heading', 'Heading']} body={data}/>

<Table caption='Table 2 - From Children.'>
  <thead>
    <tr>
      <th className='uk-text-left'>Heading</th>
      <th className='uk-text-left'>Heading</th>
      <th className='uk-text-left'>Heading</th>
    </tr>
  </thead>

  <tbody>
    <tr>
      <td className='uk-text-left'>Data</td>
      <td className='uk-text-left'>Data</td>
      <td className='uk-text-left'>Data</td>
    </tr>
    <tr>
      <td className='uk-text-left'>Data</td>
      <td className='uk-text-left'>Data</td>
      <td className='uk-text-left'>Data</td>
    </tr>
    <tr>
      <td className='uk-text-left'>Data</td>
      <td className='uk-text-left'>Data</td>
      <td className='uk-text-left'>Data</td>
    </tr>
  </tbody>
</Table>
`}
    </Codeblock>
  </section>


  <section>
    <h2>Table Head</h2>

    <p>
      Table heaings can be set by passing a list of heading to the <code>head=[]</code> prop.<br />
      Alternatively if the body prop is being used to genterate table data heading can also be generated using the JSON keys<code>head='*'</code>.
    </p>
    <Note>
      Keys generate a list of headings in the order they appears. Also the keys will be case insensitve.
    </Note>

    <h3 className='example'>Example</h3>
    <Table caption='Table 1 - Headings from body keys.' condensed head='*' body={items}/>

    <Table caption='Table 2 - Headins from prop.' condensed head={['Heading', 'Heading', 'Heading']} body={items}/>

    <h4 className='code'>Code</h4>
    <Codeblock syntax='xml'>
{
`const items = [
  {
    Name: 'OTIS',
    score: 39,
    height: 5.6
  }, {
    name: 'jocelyn',
    score: 65,
    height: 4.8
  }, {
    name: 'Ania',
    score: -50,
    height: 6.10
  }
];

<Table caption='Table 1 - Headings from body keys.' condensed head='*' body={items}/>

<Table caption='Table 2 - Headins from prop.' condensed head={['Heading', 'Heading', 'Heading']} body={items}/>
`}
    </Codeblock>
  </section>


  <section>
    <h2>Table condensed</h2>

    <p>
      To make the table move compact add
      the <code>condensed</code> prop to the Tables props.
    </p>

    <h3 className='example'>Example</h3>
    <Table caption='Condensed table' condensed head={['Heading', 'Heading', 'Heading']} body={data}/>

    <h4 className='code'>Code</h4>
    <Codeblock syntax='xml'>
{
`const data = [
  {d1: 'Data', d2: 'Data', d3: 'Data'},
  {d1: 'Data', d2: 'Data', d3: 'Data'},
  {d1: 'Data', d2: 'Data', d3: 'Data'}
];
<Table caption='Condensed table' condensed head={['Heading', 'Heading', 'Heading']} body={data}/>
`}
    </Codeblock>
  </section>


  <section>
    <h2>Table Hover</h2>

    <p>
      To highlight a row when it is hovered add
      the <code>hover</code> prop to the Tables props.
    </p>

    <h3 className='example'>Example</h3>
      <Table caption='Hoverable table' hover head={['Heading', 'Heading', 'Heading']} body={data}/>
    <h4 className='code'>Code</h4>
    <Codeblock syntax='xml'>
{
`const data = [
  {d1: 'Data', d2: 'Data', d3: 'Data'},
  {d1: 'Data', d2: 'Data', d3: 'Data'},
  {d1: 'Data', d2: 'Data', d3: 'Data'}
];

<Table caption='Hoverable table'  hover head={['Heading', 'Heading', 'Heading']} body={data}/>
`}
    </Codeblock>
  </section>


  <section>
    <h2>Table striped</h2>

    <p>
      Add zebra-striping to table by adding
      the <code>striped</code> prop to the Tables props.
    </p>

    <h3 className='example'>Example</h3>
      <Table caption='Striped table' striped head={['Heading', 'Heading', 'Heading']} body={data}/>

    <h4 className='code'>Code</h4>
    <Codeblock syntax='xml'>
{
`const data = [
  {d1: 'Data', d2: 'Data', d3: 'Data'},
  {d1: 'Data', d2: 'Data', d3: 'Data'},
  {d1: 'Data', d2: 'Data', d3: 'Data'}
];

<Table caption='Striped table'  striped head={['Heading', 'Heading', 'Heading']} body={data}/>
`}
    </Codeblock>
  </section>


  <section>
    <h2>Table sort</h2>

    <p>
      Generated tables can be sorted by passing the keys names to the <code>sort</code> prop.
      The sort prop can either be sting for a single sort or a list for multiple sort. <br />
      To reverse the sort on a feild put '-' in from of the key name.
    </p>

    <h3 className='example'>Example</h3>
    <Table caption='Sortable table' sort={['name', '-height']} head='*' body={items}/>

    <h4 className='code'>Code</h4>
    <Codeblock syntax='xml'>
{
`const items = [
  {
    Name: 'OTIS',
    score: 39,
    height: 5.6
  }, {
    name: 'jocelyn',
    score: 65,
    height: 4.8
  }, {
    name: 'Ania',
    score: -50,
    height: 6.10
  }
];

<Table caption='Condensed table' sort={['name', '-height']} head='items' body={items}/>
`}
    </Codeblock>
  </section>


    <section>
      <h2>Table props</h2>
      <p>
        <code>&lt;Table&gt;</code> props and their types.
      </p>
      <p>
        See <a href='https://github.com/otissv/react-uikit-base'>base</a> for additional props.
      </p>

      <Table>
        <thead>
          <tr>
            <th className='uk-text-left'>Prop</th>
            <th className='uk-text-left'>Type</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td className='uk-text-left'>
              <code>body</code>
            </td>
            <td className='uk-text-left'>array</td>
          </tr>
          <tr>
            <td className='uk-text-left'>
              <code>caption</code>
            </td>
            <td className='uk-text-left'>string</td>
          </tr>
          <tr>
            <td className='uk-text-left'>
              <code>condensed</code>
            </td>
            <td className='uk-text-left'>bool</td>
          </tr>
          <tr>
            <td className='uk-text-left'>
              <code>hover</code>
            </td>
            <td className='uk-text-left'>bool</td>
          </tr>
          <tr>
            <td className='uk-text-left'>
              <code>head</code>
            </td>
            <td className='uk-text-left'>
              oneOfType<br />
              array or string
            </td>
          </tr>
          <tr>
            <td className='uk-text-left'>
              <code>overflow</code>
            </td>
            <td className='uk-text-left'>bool</td>
          </tr>
          <tr>
            <td className='uk-text-left'>
              <code>sort</code>
            </td>
            <td className='uk-text-left'>
              oneOfType<br />
              array or string
            </td>
          </tr>
          <tr>
            <td className='uk-text-left'>
              <code>striped</code>
            </td>
            <td className='uk-text-left'>bool</td>
          </tr>
        </tbody>
      </Table>
    </section>

    <section>
      <h2>Tests</h2>
      <p>
        <code>npm run test</code> to run tests with minimal output.<br />
        <code>npm run test:spec</code> to run tests with detailed output.<br />
        <code>npm run test:watch</code>watches all directories and run tests with minimal output on file changes.<br />
      </p>
    </section>

    <section>
      <h2>Build</h2>
      <p>
        <code>npm run build</code> to build files fro distribution.<br />
        <code>npm run build:watch</code> watches src directory and builds files on changes.<br />
      </p>
    </section>


    <section>
      <h2>Lint</h2>
      <p>
        <code>npm run lint</code> lints scripts in src directory.<br />
        <code>npm run lint:watch</code> watches src directory and lints scripts in src directory.<br />
      </p>
    </section>


    <section>
      <h2>License</h2>
        <p>MIT</p>
    </section>

  </div>
);

export default TableDoc;
